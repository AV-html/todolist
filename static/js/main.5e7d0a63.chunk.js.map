{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","reducers/todolist-reducer.ts","EditableSpan.tsx","reducers/tasks-reducer.ts","TodolistRedux.tsx","AppRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","color","size","variant","label","helperText","value","onChange","e","currentTarget","onKeyDown","key","IconButton","onClick","AddBox","initialState","changeTodolistFilterAC","todolistID","filter","type","EditableSpan","editMode","setEditMode","offEditMode","updateTitle","autoFocus","onBlur","onDoubleClick","className","classes","TodolistRedux","todolist","console","log","tasks","useSelector","state","id","dispatch","useDispatch","tasksForTodolist","t","isDone","tasksComponents","map","Task","task","onDeleteTodoListClickHandler","useCallback","addTask","taskID","v1","addTaskAC","updateTodolistTitle","newTitle","Delete","FilterComponent","Button","disableElevation","updateTaskText","changeTaskTitleAC","Checkbox","changeTaskStatusAC","checked","removeTaskAC","AppRedux","todoLists","todolists","addTodolist","action","addTodolistAC","todoListComponents","length","tl","Grid","item","Paper","style","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","copyTasks","newTodoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5e7d0a63.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\n\r\n\r\ntype PropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: PropsType) => {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        error && setError(null);\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                color={'primary'}\r\n                size={'small'}\r\n                variant={'outlined'}\r\n                label={'Title'}\r\n                error={Boolean(error)}\r\n                helperText={error && 'Invalid Error'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyDown={onKeyPressHandler}\r\n\r\n                // className={error ? 'error' : ''}\r\n            />\r\n\r\n            <IconButton onClick={addItem} size={'small'} color=\"primary\">\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n        </div>\r\n    );\r\n})","import {FilterValuesType, TodoListType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST'\r\nexport const ADD_TODOLIST = 'ADD-TODOLIST'\r\nexport const CHANGE_FILTER = 'CHANGE-FILTER'\r\nexport const CHANGE_TITLE = 'CHANGE-TITLE'\r\n\r\nexport type RemoveTodolistAT = {\r\n    type: typeof REMOVE_TODOLIST\r\n    todolistID: string\r\n}\r\nexport type AddTodolistAT = {\r\n    type: typeof ADD_TODOLIST\r\n    todolistID: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterAT = {\r\n    type: typeof CHANGE_FILTER\r\n    todolistID: string\r\n    filter: FilterValuesType\r\n}\r\nexport type ChangeTodolistTitleAT = {\r\n    type: typeof CHANGE_TITLE\r\n    todolistID: string\r\n    title: string\r\n}\r\n\r\n\r\nexport type TodolistActionType =\r\n    RemoveTodolistAT |\r\n    AddTodolistAT |\r\n    ChangeTodolistFilterAT |\r\n    ChangeTodolistTitleAT\r\n\r\n\r\nconst initialState: Array<TodoListType> = []\r\n\r\n\r\nexport const todolistReducer = (todolists = initialState, action: TodolistActionType): Array<TodoListType> => {\r\n\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST:\r\n            return todolists.filter(tl => tl.id !== action.todolistID)\r\n\r\n        case ADD_TODOLIST:\r\n            const newTodoList: TodoListType = {\r\n                id: action.todolistID,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }\r\n            return [...todolists, newTodoList]\r\n\r\n        case CHANGE_FILTER:\r\n            return todolists.map(\r\n                (t) => t.id === action.todolistID ? {...t, filter: action.filter} : t\r\n            )\r\n\r\n        case CHANGE_TITLE:\r\n            return todolists.map((tl) => tl.id === action.todolistID ? {...tl, title: action.title} : tl)\r\n\r\n        default:\r\n            return todolists\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodolistAC = (todolistID: string): RemoveTodolistAT => ({type: REMOVE_TODOLIST, todolistID})\r\n\r\nexport const addTodolistAC = (title: string): AddTodolistAT => ({\r\n    type: ADD_TODOLIST,\r\n    todolistID: v1(),\r\n    title\r\n})\r\n\r\nexport const changeTodolistFilterAC = (todolistID: string, filter: FilterValuesType): ChangeTodolistFilterAT => ({\r\n    type: CHANGE_FILTER,\r\n    todolistID,\r\n    filter\r\n})\r\nexport const changeTodolistTitleAC = (todolistID: string, title: string): ChangeTodolistTitleAT => ({\r\n    type: CHANGE_TITLE,\r\n    todolistID,\r\n    title\r\n})\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    updateTitle: (newTitle: string) => void\r\n    classes?: string\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: PropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title);\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateTitle(title)\r\n    }\r\n\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                variant={'standard'}\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={onChangeSetTitle}\r\n                onKeyDown={onEnterHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode} className={props.classes}>{props.title}</span>\r\n    );\r\n})","import {TasksStateType} from '../App';\r\nimport {ADD_TODOLIST, AddTodolistAT, REMOVE_TODOLIST, RemoveTodolistAT} from './todolist-reducer';\r\nimport {v1} from 'uuid';\r\n\r\n\r\nexport const REMOVE_TASK = 'REMOVE_TASK'\r\nexport const ADD_TASK = 'ADD_TASK'\r\nexport const CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'\r\nexport const CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE';\r\n\r\nexport type TasksActionType = RemoveTaskAT | AddTaskAT | ChangeTaskStatusAT | ChangeTaskTitleAT | AddTodolistAT | RemoveTodolistAT\r\n\r\nexport type RemoveTaskAT = ReturnType<typeof removeTaskAC>\r\nexport type AddTaskAT = ReturnType<typeof addTaskAC>\r\nexport type ChangeTaskStatusAT = ReturnType<typeof changeTaskStatusAC>\r\nexport type ChangeTaskTitleAT = ReturnType<typeof changeTaskTitleAC>\r\n\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const tasksReducer = (tasks = initialState, action: TasksActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...tasks,\r\n                [action.todolistID]: tasks[action.todolistID].filter((tl) => tl.id !== action.taskID)\r\n            }\r\n        case ADD_TASK: {\r\n            return {\r\n                ...tasks,\r\n                [action.todolistID]: [{\r\n                    id: action.taskID,\r\n                    title: action.title,\r\n                    isDone: false\r\n                }, ...tasks[action.todolistID]]\r\n            }\r\n        }\r\n        case CHANGE_TASK_STATUS: {\r\n            return {\r\n                ...tasks,\r\n                [action.todolistID]: tasks[action.todolistID].map((task) => task.id === action.taskID ? {\r\n                    ...task,\r\n                    isDone: action.isDone\r\n                } : task)\r\n            }\r\n        }\r\n        case CHANGE_TASK_TITLE: {\r\n            return {\r\n                ...tasks,\r\n                [action.todolistID]: tasks[action.todolistID].map((task) => task.id === action.taskID ? {\r\n                    ...task,\r\n                    title: action.title\r\n                } : task)\r\n            }\r\n        }\r\n        case ADD_TODOLIST: {\r\n            return {\r\n                ...tasks,\r\n                [action.todolistID]: []\r\n            }\r\n        }\r\n        case REMOVE_TODOLIST: {\r\n            const copyTasks = {...tasks};\r\n            delete copyTasks[action.todolistID]\r\n            return copyTasks\r\n\r\n            // const {[action.todolistID]: [], ...rest} = {...tasks}\r\n            // return rest\r\n        }\r\n        default:\r\n            return tasks;\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (todolistID: string, taskID: string) => ({\r\n    type: REMOVE_TASK, // Конкретное значение, а не любая строка\r\n    todolistID,\r\n    taskID,\r\n} as const)\r\n\r\nexport const addTaskAC = (todolistID: string, title: string) => ({\r\n    type: ADD_TASK,\r\n    todolistID,\r\n    taskID: v1(),\r\n    title,\r\n} as const)\r\n\r\nexport const changeTaskStatusAC = (todolistID: string, taskID: string, isDone: boolean) => ({\r\n    type: CHANGE_TASK_STATUS,\r\n    todolistID,\r\n    taskID,\r\n    isDone,\r\n} as const)\r\n\r\nexport const changeTaskTitleAC = (todolistID: string, taskID: string, title: string) => ({\r\n    type: CHANGE_TASK_TITLE,\r\n    todolistID,\r\n    taskID,\r\n    title,\r\n} as const)","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TodoListType} from './AppRedux';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './reducers/tasks-reducer';\r\nimport {changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC} from './reducers/todolist-reducer';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todolist: TodoListType\r\n}\r\n\r\n\r\nexport const TodolistRedux = React.memo(({todolist}: PropsType) => {\r\n\r\n    console.log('Todolist redux render');\r\n\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[todolist.id])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => !t.isDone);\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    // const tasksForTodolist = useMemo(() => {\r\n    //     if (todolist.filter === 'active') {\r\n    //         return tasks.filter(t => !t.isDone);\r\n    //     }\r\n    //     if (todolist.filter === 'completed') {\r\n    //         return tasks.filter(t => t.isDone);\r\n    //     }\r\n    //     return tasks\r\n    // }, [todolist.filter, tasks])\r\n\r\n\r\n\r\n    const tasksComponents = tasksForTodolist.map(t => {\r\n        return <Task key={t.id}\r\n                     todolistID={todolist.id}\r\n                     task={t}\r\n        />\r\n        // return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n        //     <Checkbox\r\n        //         onChange={onChangeHandler}\r\n        //         checked={t.isDone}\r\n        //         size={'small'}\r\n        //         color={'primary'}\r\n        //\r\n        //     />\r\n        //     <EditableSpan title={t.title} updateTitle={updateTaskText}/>\r\n        //     <IconButton onClick={onClickHandler} size={'small'}>\r\n        //         <Delete/>\r\n        //     </IconButton>\r\n        // </li>\r\n    })\r\n\r\n    const onDeleteTodoListClickHandler = useCallback(() => {\r\n        dispatch(removeTodolistAC(todolist.id))\r\n    }, [dispatch, todolist.id])\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskAC(todolist.id, title))\r\n    }, [todolist.id, dispatch])\r\n\r\n    const updateTodolistTitle = useCallback((newTitle: string) => {\r\n        dispatch(changeTodolistTitleAC(todolist.id, newTitle))\r\n    }, [dispatch, todolist.id])\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h3>\r\n                <EditableSpan title={todolist.title} updateTitle={updateTodolistTitle}/>\r\n                <IconButton onClick={onDeleteTodoListClickHandler} size={'small'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul>\r\n                {tasksComponents}\r\n            </ul>\r\n\r\n            <FilterComponent todolist={todolist}/>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst FilterComponent = React.memo(({todolist}: { todolist: TodoListType }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const onAllClickHandler = () => dispatch(changeTodolistFilterAC(todolist.id, 'all'));\r\n    const onActiveClickHandler = () => dispatch(changeTodolistFilterAC(todolist.id, 'active'));\r\n    const onCompletedClickHandler = () => dispatch(changeTodolistFilterAC(todolist.id, 'completed'));\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                variant={todolist.filter === 'all' ? 'outlined' : 'contained'}\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                disableElevation\r\n                onClick={onAllClickHandler}\r\n            >\r\n                All\r\n            </Button>\r\n            <Button\r\n                variant={todolist.filter === 'active' ? 'outlined' : 'contained'}\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                disableElevation\r\n                onClick={onActiveClickHandler}\r\n            >\r\n                Active\r\n            </Button>\r\n            <Button\r\n                variant={todolist.filter === 'completed' ? 'outlined' : 'contained'}\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                disableElevation\r\n                onClick={onCompletedClickHandler}\r\n            >\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistID: string\r\n}\r\n\r\n\r\nconst Task = React.memo(({task, todolistID}: TaskPropsType) => {\r\n    console.log('Task render');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(removeTaskAC(todolistID, task.id))\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeTaskStatusAC(todolistID, task.id, e.currentTarget.checked))\r\n    }\r\n    const updateTaskText = useCallback((newTitle: string) => {\r\n        dispatch(changeTaskTitleAC(todolistID, task.id, newTitle))\r\n    }, [dispatch, todolistID, task.id])\r\n\r\n    return (\r\n        <li className={task.isDone ? 'is-done' : ''}>\r\n            <Checkbox\r\n                onChange={onChangeHandler}\r\n                checked={task.isDone}\r\n                size={'small'}\r\n                color={'primary'}\r\n\r\n            />\r\n            <EditableSpan title={task.title} updateTitle={updateTaskText}/>\r\n            <IconButton onClick={onClickHandler} size={'small'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    // changeTodolistFilterAC,\r\n    // changeTodolistTitleAC,\r\n    // removeTodolistAC\r\n} from './reducers/todolist-reducer';\r\n// import {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './reducers/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TodolistRedux} from './TodolistRedux';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction AppRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n\r\n    const dispatch = useDispatch() // Вызывается 1 раз!!!\r\n\r\n    // function removeTask(tasksID: string, todoListID: string) {\r\n    //     dispatch(removeTaskAC(todoListID, tasksID))\r\n    // }\r\n    //\r\n    // function addTask(title: string, todoListID: string) {\r\n    //     dispatch(addTaskAC(todoListID, title))\r\n    // }\r\n    //\r\n    // function changeStatus(taskId: string, isDone: boolean, todoListID: string) {\r\n    //     dispatch(changeTaskStatusAC(todoListID, taskId, isDone))\r\n    // }\r\n    //\r\n    // function changeTaskTitle(todoListID: string, id: string, title: string) {\r\n    //     dispatch(changeTaskTitleAC(todoListID, id, title))\r\n    // }\r\n    //\r\n    //\r\n    // function removeTodoList(todoListID: string) {\r\n    //     const action = removeTodolistAC(todoListID)\r\n    //\r\n    //     // Вызовет все reducers\r\n    //     dispatch(action)\r\n    //     // dispatch(action)\r\n    // }\r\n    //\r\n    // function changeFilter(value: FilterValuesType, todoListID: string) {\r\n    //     dispatch(changeTodolistFilterAC(todoListID, value))\r\n    // }\r\n    //\r\n    // function changeTodolistTitle(todoListID: string, title: string) {\r\n    //     dispatch(changeTodolistTitleAC(todoListID, title))\r\n    // }\r\n    //\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    const todoListComponents = todoLists.length ? todoLists.map((tl => {\r\n\r\n            return (\r\n                <Grid item key={tl.id}>\r\n                    <Paper variant=\"outlined\" style={{padding: '20px'}}>\r\n                        <TodolistRedux\r\n                            todolist={tl}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }))\r\n        : <span>Create your first todolist</span>\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={'outlined'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: '15px 0'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppRedux;\r\n","import {tasksReducer} from '../reducers/tasks-reducer'\r\nimport {todolistReducer} from '../reducers/todolist-reducer'\r\nimport {combineReducers, legacy_createStore as createStore} from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppRedux from './AppRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppRedux />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}